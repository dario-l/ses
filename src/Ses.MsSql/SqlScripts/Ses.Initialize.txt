CREATE TABLE [Streams] (
    [InternalId] BIGINT NOT NULL IDENTITY(1,1),
    [StreamId] uniqueidentifier NOT NULL,
    [Version] int NOT NULL,
    [CommitId] uniqueidentifier NOT NULL,
    [ContractName] nvarchar(225) NOT NULL,
    [CreatedAtUtc] datetime NOT NULL,
    [Payload] varbinary(max) NOT NULL,
    [EventId] BIGINT NULL
    CONSTRAINT [PK_Streams] PRIMARY KEY CLUSTERED ([StreamId],[Version])
);

ALTER TABLE Streams SET ( LOCK_ESCALATION = DISABLE);

CREATE UNIQUE NONCLUSTERED INDEX [IX_Streams_CommitId_Version] ON [dbo].[Streams] (
    [CommitId] ASC,
    [Version] ASC
);

CREATE NONCLUSTERED INDEX [IX_Streams_EventId_InternalId] ON [dbo].[Streams] (
    [EventId] ASC,
    [InternalId] ASC
);

CREATE UNIQUE NONCLUSTERED INDEX [IX_Streams_InternalId] ON [dbo].[Streams] ([InternalId]);

CREATE TABLE [StreamsMetadata] (
    [StreamId] uniqueidentifier NOT NULL,
    [CommitId] uniqueidentifier NOT NULL,
    [Payload] varbinary(max) NOT NULL,
    CONSTRAINT [PK_StreamsMetadata] PRIMARY KEY CLUSTERED ([StreamId],[CommitId])
);

CREATE TABLE [StreamsSnapshots] (
    [StreamId] uniqueidentifier NOT NULL,
    [Version] int NOT NULL,
    [LastStreamVersion] int NOT NULL,
    [ContractName] nvarchar(225) NOT NULL,
    [GeneratedAtUtc] datetime NOT NULL,
    [Payload] varbinary(max) NOT NULL,
    CONSTRAINT [PK_StreamsSnapshots] PRIMARY KEY CLUSTERED ([StreamId],[Version])
);

CREATE TABLE [dbo].[StreamsSubscriptions] (
    [Id] [int] IDENTITY(1,1) NOT NULL,
    [Name] [nvarchar](50) NOT NULL,
    CONSTRAINT [PK_StreamsSubscriptions_1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

CREATE TABLE [dbo].[StreamsSubscriptionContracts](
    [StreamsSubscriptionId] [int] NOT NULL,
    [EventContractName] [nvarchar](225) NOT NULL,
    CONSTRAINT [PK_StreamsSubscriptionContracts_1] PRIMARY KEY CLUSTERED
    (
        [EventContractName] ASC,
        [StreamsSubscriptionId] ASC
    )
);
GO

CREATE PROCEDURE [dbo].[SesSelectEvents]
(
    @StreamId UNIQUEIDENTIFIER,
    @FromVersion INT,
    @PessimisticLock BIT
)
AS
BEGIN
    SET NOCOUNT ON;
    IF(@PessimisticLock = 1) BEGIN
        DECLARE @LockedStreamId uniqueidentifier
        SELECT TOP 1 @LockedStreamId = [StreamId] FROM [Streams] WITH (UPDLOCK,ROWLOCK) WHERE [StreamId] = @StreamId AND [Version] = 0
        IF @LockedStreamId IS NULL BEGIN
            RAISERROR('StreamIsNotLockable', 16, 1);
            RETURN;
        END
    END

    DECLARE @SPayload VARBINARY(MAX), @SContractName NVARCHAR(255), @SVersion int

    SELECT
        @SContractName = [ContractName],
        @SVersion = [Version],
        @SPayload = [Payload]
    FROM
        [StreamsSnapshots]
    WHERE
        [StreamId] = @StreamId
        AND [Version] > 0
    
    SELECT @SContractName, @SVersion, @SPayload

    IF @SVersion IS NOT NULL BEGIN
        SET @FromVersion = @SVersion + 1
    END

    SELECT
        [ContractName],
        [Version],
        [Payload]
    FROM
        [Streams]
    WHERE
        [StreamId] = @StreamId
        AND [Version] >= @FromVersion
    ORDER BY
        [Version] ASC
END;
GO

CREATE PROCEDURE [dbo].[SesInsertEventsNoStream]
(
    @StreamId UNIQUEIDENTIFIER,
    @CommitId UNIQUEIDENTIFIER,
    @CreatedAtUtc DATETIME,
    @MetadataPayload VARBINARY(MAX),
    @IsLockable BIT,
    @EventContractName NVARCHAR(250),
    @EventVersion INT,
    @EventPayload VARBINARY(MAX)
)
AS
BEGIN
    SET NOCOUNT ON;
    IF @EventVersion = 1 AND @IsLockable = 1 BEGIN -- if stream exists then index will be violated
        INSERT INTO [Streams]([StreamId], [CommitId], [Version], [ContractName], [Payload], [CreatedAtUtc])
        VALUES(@StreamId, @CommitId, 0, 'Lockable', 0, @CreatedAtUtc);
    END

    -- if stream exists then index will be violated
    INSERT INTO [Streams]([StreamId], [CommitId], [Version], [ContractName], [Payload], [CreatedAtUtc])
    VALUES(@StreamId, @CommitId, @EventVersion, @EventContractName, @EventPayload, @CreatedAtUtc);

    IF @EventVersion = 1 BEGIN
        INSERT INTO [StreamsSnapshots]([StreamId], [Version], [LastStreamVersion], [ContractName], [GeneratedAtUtc], [Payload])
        VALUES(@StreamId, 0, 0, 'Init', @CreatedAtUtc, 0);
    END

    IF(@MetadataPayload IS NOT NULL AND LEN(@MetadataPayload) > 0) BEGIN
        INSERT INTO [StreamsMetadata]([StreamId], [CommitId], [Payload])
        VALUES(@StreamId, @CommitId, @MetadataPayload);
    END
END;
GO

CREATE PROCEDURE [dbo].[SesInsertEventsAny]
(
    @StreamId UNIQUEIDENTIFIER,
    @CommitId UNIQUEIDENTIFIER,
    @CreatedAtUtc DATETIME,
    @MetadataPayload VARBINARY(MAX),
    @IsLockable BIT,
    @EventContractName NVARCHAR(250),
    @EventVersion INT,
    @EventPayload VARBINARY(MAX)
)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @IsNew BIT = 0
    IF NOT EXISTS(SELECT TOP 1 1 FROM [Streams] WHERE [StreamId] = @StreamId) BEGIN
        SET @IsNew = 1
    END

    IF(@IsNew = 1 AND @IsLockable = 1) BEGIN
        INSERT INTO [Streams]([StreamId], [CommitId], [Version], [ContractName], [CreatedAtUtc], [Payload])
        VALUES(@StreamId, @CommitId, 0, 'Lockable', @CreatedAtUtc, 0);
    END

    INSERT INTO [Streams]([StreamId], [CommitId], [Version], [ContractName], [Payload], [CreatedAtUtc])
    SELECT TOP 1
        @StreamId,
        @CommitId,
        IsNull(MAX([Version]), 0) + 1,
        @EventContractName,
        @EventPayload,
        @CreatedAtUtc
    FROM
        [Streams]
    WHERE
        [StreamId] = @StreamId


    IF(@MetadataPayload IS NOT NULL AND LEN(@MetadataPayload) > 0) BEGIN
        INSERT INTO [StreamsMetadata]([StreamId], [CommitId], [Payload])
        VALUES(@StreamId, @CommitId, @MetadataPayload);
    END

    IF(@IsNew = 1 AND @IsLockable = 1) BEGIN
        INSERT INTO [StreamsSnapshots]([StreamId], [Version], [LastStreamVersion], [ContractName], [GeneratedAtUtc], [Payload])
        VALUES(@StreamId, 0, 0, 'Init', @CreatedAtUtc, 0);
    END
END;
GO

CREATE PROCEDURE [dbo].[SesInsertEventsExpectedVersion]
(
    @StreamId UNIQUEIDENTIFIER,
    @CommitId UNIQUEIDENTIFIER,
    @CreatedAtUtc DATETIME,
    @MetadataPayload VARBINARY(MAX),
    @ExpectedVersion INT,
    @EventContractName NVARCHAR(250),
    @EventVersion INT,
    @EventPayload VARBINARY(MAX)
)
AS
BEGIN
    SET NOCOUNT ON;
    IF(SELECT TOP 1 1 FROM [Streams] WHERE [StreamId] = @StreamId AND (SELECT TOP 1 [Version] FROM [Streams] WHERE [StreamId] = @StreamId ORDER BY [Version] DESC) = @ExpectedVersion) <> 1 BEGIN
        RAISERROR('WrongExpectedVersion', 16, 1);
        RETURN;
    END

    INSERT INTO [Streams]([StreamId], [CommitId], [Version], [ContractName], [Payload], [CreatedAtUtc])
    VALUES(@StreamId, @CommitId, @EventVersion, @EventContractName, @EventPayload, @CreatedAtUtc);

    IF(@MetadataPayload IS NOT NULL AND LEN(@MetadataPayload) > 0) BEGIN
        INSERT INTO [StreamsMetadata]([StreamId], [CommitId], [Payload])
        VALUES(@StreamId, @CommitId, @MetadataPayload);
    END
END;
GO

CREATE PROCEDURE SesSelectTimelineEvents
(
    @Limit INT,
    @SequenceId BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT TOP(@Limit)
        s.[ContractName] AS [EventContractName],
        s.[Payload] AS [EventPayload],
        sm.[Payload] AS [MetaPayload],
        s.[StreamId],
        s.[CommitId],
        s.[CreatedAtUtc],
        s.[EventId],
        s.[Version]
    FROM
        [Streams] s WITH(READPAST,ROWLOCK)
        LEFT JOIN [StreamsMetadata] sm WITH(NOLOCK) ON sm.StreamId = s.StreamId AND sm.CommitId = s.CommitId
    WHERE
        s.[EventId] > @SequenceId
    ORDER BY
        s.[EventId] ASC
END;
GO

CREATE PROCEDURE SesSelectTimelineSubscriptionEvents
(
    @Limit INT,
    @SequenceId BIGINT,
    @SubscriptionId INT
)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT TOP(@Limit)
        s.[ContractName] AS [EventContractName],
        s.[Payload] AS [EventPayload],
        sm.[Payload] AS [MetaPayload],
        s.[StreamId],
        s.[CommitId],
        s.[CreatedAtUtc],
        s.[EventId],
        s.[Version]
    FROM
        [Streams] s WITH(READPAST,ROWLOCK)
        INNER JOIN [StreamsSubscriptionContracts] ssc WITH(NOLOCK) ON ssc.EventContractName = s.ContractName
        LEFT JOIN [StreamsMetadata] sm WITH(NOLOCK) ON sm.StreamId = s.StreamId AND sm.CommitId = s.CommitId
    WHERE
        s.[EventId] > @SequenceId
        AND ssc.StreamsSubscriptionId = @SubscriptionId
    ORDER BY
        s.[EventId] ASC
END;
GO

CREATE PROCEDURE SesDeleteStreamAny
(
    @StreamId UNIQUEIDENTIFIER
)
AS BEGIN
    SET NOCOUNT ON;
    DELETE FROM [StreamsSnapshots] WHERE [StreamId] = @StreamId
    DELETE FROM [StreamsMetadata] WHERE [StreamId] = @StreamId
    DELETE FROM [Streams] WHERE [StreamId] = @StreamId
END;
GO

CREATE PROCEDURE SesDeleteStreamExpectedVersion
(
    @StreamId UNIQUEIDENTIFIER,
    @ExpectedVersion INT
)
AS BEGIN
    SET NOCOUNT ON;
    
    DELETE FROM [StreamsSnapshots]
    WHERE
        [StreamId] = @StreamId
        AND (
            SELECT
                COUNT([Version])
            FROM
                [Streams]
            WHERE
                [Version] >= @ExpectedVersion
                AND [StreamId] = @StreamId
        ) = 1
    
    IF @@ROWCOUNT = 0 BEGIN
        RAISERROR('WrongExpectedVersion', 16, 1);
        RETURN;
    END
    DELETE FROM [StreamsMetadata] WHERE [StreamId] = @StreamId
    DELETE FROM [Streams] WHERE [StreamId] = @StreamId
END;
GO

CREATE PROCEDURE SesUpdateSnapshot
(
    @StreamId UNIQUEIDENTIFIER,
    @GeneratedAtUtc DATETIME,
    @Version INT,
    @ContractName NVARCHAR(225),
    @Payload VARBINARY(MAX)
)
AS BEGIN
    SET NOCOUNT ON;
    
    UPDATE [StreamsSnapshots] SET
        GeneratedAtUtc = @GeneratedAtUtc,
        Version = @Version,
        Payload = @Payload,
        ContractName = @ContractName
    WHERE
        [StreamId] = @StreamId
    
    IF @@ROWCOUNT = 0 BEGIN
        RAISERROR('WrongExpectedVersion', 16, 1);
        RETURN;
    END
END;
GO

CREATE PROCEDURE SesLinearize
(
    @Limit INT
)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @id BIGINT, @Version INT, @StreamId UNIQUEIDENTIFIER, @EventId BIGINT

    SELECT @EventId = IsNull(MAX(s.[EventId]), 0) FROM [Streams] s WITH (READPAST,ROWLOCK) WHERE s.[EventId] > 0

    UPDATE dest SET
        [EventId] = @EventId,
        @EventId = @EventId + 1
    FROM
        [Streams] dest WITH (INDEX (IX_Streams_InternalId))
        INNER JOIN (SELECT TOP(@Limit) s.[InternalId] FROM [Streams] s WITH (READPAST,ROWLOCK) WHERE s.[EventId] IS NULL ORDER BY s.[InternalId] ASC) src ON src.InternalId = dest.InternalId
    OPTION (MAXDOP 1)

    SELECT TOP 1 CAST(1 AS BIT) FROM [Streams] s WITH (READPAST,ROWLOCK) WHERE s.[EventId] IS NULL
END;
GO